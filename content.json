{"meta":{"title":"java程序猿","subtitle":"Javaweb | javaEE| springBoot | springCloud","description":"Javaweb | javaEE| springBoot | springCloud","author":"like","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-06-25T08:58:02.638Z","updated":"2017-06-24T10:15:09.208Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"李科 一个平凡的程序猿，却有不平凡的想法。 生于1991年，现居住在成都，毕业于电子科技大学成都学院（一个三本大学，不是本部哦，/(ㄒoㄒ)/~~，不要鄙视我。。。）。本人一直就业在金融行业，现就业与佰仟金融。 目前，主要对 spingboot ,spingCloud ,区块链等概念比较感兴趣，希望大家可以一起交流。 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/about/index.html"},{"title":"Tags","date":"2017-06-25T08:58:02.645Z","updated":"2017-06-23T07:39:16.019Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/tags/index.html"},{"title":"Categories","date":"2017-06-25T08:58:02.641Z","updated":"2017-06-23T07:39:16.019Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/categories/index.html"}],"posts":[{"title":"一起学JAVA之《spring boot》05 - spring boot 自定义配置文件","slug":"一起学JAVA之《spring boot》05-springBoot自定义配置文件","date":"2017-07-02T15:33:38.000Z","updated":"2017-07-02T15:45:45.668Z","comments":true,"path":"2017/07/02/一起学JAVA之《spring boot》05-springBoot自定义配置文件/","link":"","permalink":"http://yoursite.com/2017/07/02/一起学JAVA之《spring boot》05-springBoot自定义配置文件/","excerpt":"一、导航本节内容简介： 1. 新建一个测试自定义配置的模块 2. 自定义配置 3. 自定义配置文件 4. 配置文件属性验证","text":"一、导航本节内容简介： 1. 新建一个测试自定义配置的模块 2. 自定义配置 3. 自定义配置文件 4. 配置文件属性验证 二、新建一个测试自定义配置的模块idea创建子模块流程 在项目上新建模块 然后选择create from archetype ，下面选择快速开始模块（也可以是其他模块） 接着就是一直选择下一步直到完成，中间会配置项目名字等信息，就按照标准maven配置就是了 有时候我们创建一个模块之后，发现下载模块信息很慢，就可以配置阿里云的私服阿里私服镜像地址123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt; 三、自定义配置自定义配置是读取我们自己的配置文件或在application中的自定义数据 在创建的模块中，创建一个ConfigController 123456789101112131415161718192021/** * 配置测试类 * The type Config controller. */@RestControllerpublic class ConfigController &#123; @Value(\"$&#123;my.name : default_Like&#125;\") private String name; @Value(\"$&#123;my.age&#125;\") private int age; @RequestMapping(\"/testConfigure\") public String testConfigure()&#123; return \"name = \"+name +\" age = \"+age; &#125;&#125; 在配置文件中，加如下配置1234567server.port=8083#自定义属性my.name=my.age=20 启动运行，访问：http://localhost:8083/testConfigure结果：name = default_Like age = 20 如果my.name 属性设置了值，就会返回的是my.name的值，否则就是默认的值 四、自定义配置文件有时候我们在application中定义属性过多，这个时候我们就可以自定义配置文件，如下 自定义配置文件person.properties,位置在src/main/resources中 123person.name=likeperson.age=22person.gender=man 自定义配置文件需要引入一个自动配置的jar 123456&lt;!--自定义配置所需jar包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; 创建PersonConfig类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.likeoak.config;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.PropertySource;import org.springframework.stereotype.Component;/** * 自定义配置文件 * The type Person config. */@Component@ConfigurationProperties(prefix = \"person\")@PropertySource(value = \"classpath:person.properties\")public class PersonConfig &#123; private String name; private Integer age; private String gender; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public String getGender() &#123; return gender; &#125; public void setGender(String gender) &#123; this.gender = gender; &#125; @Override public String toString() &#123; return \"PersonConfig&#123;\" + \"name='\" + name + '\\'' + \", age=\" + age + \", gender='\" + gender + '\\'' + '&#125;'; &#125;&#125; 代码解释@Component 将这个配置类声明为一个bean@ConfigurationProperties 自定义配置注解，prefix 指的是当前配置文件中属性的前缀@PropertySource 扫描配置文件路径注解，在1.5以前可以用@ConfigurationProperties的location注解来指定文件路径，1.5之后就用这个注解来指定 配置测试类123456789101112131415161718192021222324252627282930/** * 配置测试类 * The type Config controller. */@RestControllerpublic class ConfigController &#123; @Value(\"$&#123;my.name : default_Like&#125;\") private String name; @Value(\"$&#123;my.age&#125;\") private int age; @Autowired private PersonConfig personConfig; @RequestMapping(\"/testConfigure\") public String testConfigure()&#123; return \"name = \"+name +\" age = \"+age; &#125; @RequestMapping(\"/testPersonConfig\") public String testPersonConfig()&#123; return personConfig.toString(); &#125;&#125; 启动，访问http://localhost:8083/testPersonConfig结果：PersonConfig{name=’like’, age=22, gender=’man’} 五、配置文件属性验证spring boot 也可以校验外部配置，默认使用JSR-303，在@ConfigurationProperties类添加JSR-303 javax.validation约束注解 1. 测试没有加验证的情况 删除person.properties配置文件中的person.name属性 启动程序，访问http://localhost:8083/testPersonConfig结果：PersonConfig{name=’null’, age=22, gender=’man’} 在代码上加入验证123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** * 自定义配置文件 * The type Person config. */@Component@ConfigurationProperties(prefix = \"person\")@PropertySource(value = \"classpath:person.properties\")public class PersonConfig &#123; @NotNull private String name; private Integer age; private String gender; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public String getGender() &#123; return gender; &#125; public void setGender(String gender) &#123; this.gender = gender; &#125; @Override public String toString() &#123; return \"PersonConfig&#123;\" + \"name='\" + name + '\\'' + \", age=\" + age + \", gender='\" + gender + '\\'' + '&#125;'; &#125; 启动：结果：123456789101112131415***************************APPLICATION FAILED TO START***************************Description:Binding to target PersonConfig&#123;name='null', age=22, gender='man'&#125; failed: Property: person.name Value: null Reason: 不能为nullAction: 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/07/02/一起学JAVA之《spring boot》05-springBoot自定义配置文件/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"一起学JAVA之《spring boot》04 - spring boot 自定义（外化）配置","slug":"一起学JAVA之《spring-boot》04-spring-boot-自定义（外化）配置","date":"2017-06-28T15:16:36.000Z","updated":"2017-06-28T15:36:07.696Z","comments":true,"path":"2017/06/28/一起学JAVA之《spring-boot》04-spring-boot-自定义（外化）配置/","link":"","permalink":"http://yoursite.com/2017/06/28/一起学JAVA之《spring-boot》04-spring-boot-自定义（外化）配置/","excerpt":"一、导航本节内容简介： 1. 配置介绍 2. 配置随机值 3. 访问命令行属性，jar包代码结构 4. 不同环境的配置文件 5. 配置文件中的占位符 6. 使用YAML代替properties","text":"一、导航本节内容简介： 1. 配置介绍 2. 配置随机值 3. 访问命令行属性，jar包代码结构 4. 不同环境的配置文件 5. 配置文件中的占位符 6. 使用YAML代替properties 一、 配置介绍spring boot 可以有多种方法来实现对配置的自定义，我们需要知道有哪些配置的方式，顺序是怎么样的 配置顺序（优先级循序即优先级高的可以覆盖低的）： 命令行参数 来自java的JNDI属性 java系统属性(System.properties) 操作系统环境变量 random.*里包含的属性（RandomValuePropertySource） 在打包jar外的应用配置文件（application.properties,YAML） 在打包jar内的应用配置文件（application.properties,YAML） 在@Configuration配置的 spring boot默认属性 注意： spring boot 可以在启动的时候动态修改配置文件内容，包括自定义内容 jar 打包外部配置文件可以覆盖jar内的配置文件 二、配置随机值随机值使用情况 随机值可以在访问页面的时候带上，防止缓存， 在某些需要测试数据每次不一致的时候使用 也可以从当UUID 在配置文件中加如下配置1234server.port=8081server.context-path=/bootnumber=$&#123;random.int&#125; 在昨天的测试类中继续添加测试方法1234567891011121314151617181920212223242526272829303132333435363738394041package com.likeoak.controller;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * 测试Controller * The type Test controller. */@RestControllerpublic class TestController &#123; @Value(\"$&#123;number&#125;\") private Integer number; /** * 返回 String 字符串，访问成功，返回“test ok” * Test string. * * @return the string */ @RequestMapping(\"/test\") public String test()&#123; return \"test ok!\"; &#125; /** * 测试随机返回一个整数 * Test random int integer. * * @return the integer */@RequestMapping(\"/testRandomInt\") public Integer testRandomInt()&#123; return number; &#125;&#125; 启动，访问http://localhost:8081/boot/testRandomInt结果：1574663730 配置随机值，可以配置的情况 随机整数（int） 随机范围内的整数 随机long整数 随机字符串 在配置文件中添加如下属性12345678910//随机整数number=$&#123;random.int&#125;//随机小于10的整数numberLessThan=$&#123;random.int(10)&#125;//随机10-100整数numberRange=$&#123;random.int(10,100)&#125;//随机longlongNumber=$&#123;random.long&#125;//随机字符串randomStr=$&#123;random.value&#125; 在测试类中继续添加如下方法12345678910111213@RequestMapping(\"/testRandom\") public String testRandom()&#123; StringBuilder builder = new StringBuilder(); builder.append(\"随机返回值：&#123;\"); builder.append(\" 随机整数:\"+number ); builder.append(\" 随机小于10的整数:\"+numberLessThan ); builder.append(\" 随机10-100的整数:\"+numberRange ); builder.append(\" 随机long:\"+longNumber ); builder.append(\" 随机字符串:\"+randomStr +\"&#125;\"); return builder.toString(); &#125; 启动，访问：http://localhost:8081/boot/testRandom结果：随机返回值：{ 随机整数:905599732 随机小于10的整数:0 随机10-100的整数:26 随机long:-8568292958322258583 随机字符串:1a4b7f3091807cee19a44a18f08caae5} 三、访问命令行属性，jar包代码结构 对当前程序用maven打包，即使用mvn clean , mvn package命令 打包之后在项目的target目录中，可以看到打包好的jar包 默认情况下，spring boot可以执行任何以–开头的参数，如 –server.port=8081 执行：java -jar SpringApplicationIntroduce-1.0.0.jar –server.port=8082 执行结果： 可以看到，端口已经被覆盖，变为8082了 在target目中我们还看到一个SpringApplicationIntroduce-1.0.0.jar.original文件，这个文件可以看到这个jar包结构，执行以下命令jar tvf SpringApplicationIntroduce-1.0.0.jar.original 目录结构： jar包主要有三层目录orgMETE-INFBOOT-INF 其中org目录中包含spring boot加载的依赖包 METE-INF包中主要是spring boot 启动配置特别注意MANIFEST.MF 配置：123456789101112131415Manifest-Version: 1.0Implementation-Title: SpringApplicationIntroduceImplementation-Version: 1.0.0Archiver-Version: Plexus ArchiverBuilt-By: SEELEImplementation-Vendor-Id: com.likeoakSpring-Boot-Version: 1.5.2.RELEASEImplementation-Vendor: Pivotal Software, Inc.Main-Class: org.springframework.boot.loader.JarLauncherStart-Class: com.likeoak.AppSpring-Boot-Classes: BOOT-INF/classes/Spring-Boot-Lib: BOOT-INF/lib/Created-By: Apache Maven 3.2.5Build-Jdk: 1.8.0_121Implementation-URL: http://maven.apache.org 可以看到打包的信息，还可以看到启动主类，版本信息等有时候启动报错，找不到主类，就可以看看这个配置文件是否打包正确 BOOT-INF为我们自己写的代码及配置文件 四、不同环境的配置文件一般我们开发有开发环境，测试有测试环境，生产有生产环境，我们应该把配置文件分开，分开规则是：application-{profile}.properties如： 生产 application-prod.properties 测试 application-test.properties然后在application.properties中指定环境1spring.profiles.action=prod 五、配置文件中的占位符在一个配置文件中，如果有共同属性，我们可以提取出来用占位符 如：12app.name=aaaapp.description=$&#123;app.name&#125; is a Spring Boot application 这里在app.description中${app.name}就是占位符，就会被替换成aaa 六、使用YAML代替propertiesYAML是JSON的一个超集，也是一种方便的定义层次配置数据的格式。spring boot 可以使用YAML替代properties文件 普通替代如：在properties中1234environments.dev.url=http://dev.bar.comenvironments.dev.name=Developer Setupenvironments.prod.url=http://foo.bar.comenvironments.prod.name=My Cool App 在YAML中1234567environments: dev: url: http://dev.bar.com name: Developer Setup prod: url: http://foo.bar.com name: My Cool App YAML列表如：1234my: servers: - dev.bar.com - foo.bar.com 变成properties就变为以下格式12my.servers[0]=dev.bar.commy.servers[1]=foo.bar.com YAML 多环境可以使用同一配置文件如：123456789101112server: address: 192.168.1.100---spring: profiles: developmentserver: address: 127.0.0.1---spring: profiles: productionserver: address: 192.168.1.120 如果在上面配置文件中在配置spring.profiles.action=production，那么 server.address=192.168.1.120 就会被激活如果没有配置，就会默认使用server.address=192.168.1.100 后续会继续推出这一系列spring boot的文章 本人网站：一起学JAVA 一起学习QQ群：581665151 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/28/一起学JAVA之《spring-boot》04-spring-boot-自定义（外化）配置/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"一起学JAVA之《spring boot》03 - 开始spring boot基本配置及项目结构","slug":"一起学JAVA之《spring-boot》03-开始spring-boot基本配置及项目结构","date":"2017-06-27T15:00:54.000Z","updated":"2017-06-27T15:21:48.294Z","comments":true,"path":"2017/06/27/一起学JAVA之《spring-boot》03-开始spring-boot基本配置及项目结构/","link":"","permalink":"http://yoursite.com/2017/06/27/一起学JAVA之《spring-boot》03-开始spring-boot基本配置及项目结构/","excerpt":"一、导航本节内容简介： 1. spring boot 配置文件，使用@SpringBootApplication注解 2. spring boot 修改Java版本 和项目编码 3. 一个标准的spring boot 代码结构 4. 查看当前项目自动配置了那些模块 5. 禁用自动配置 6. 自定义banner及关闭banner","text":"一、导航本节内容简介： 1. spring boot 配置文件，使用@SpringBootApplication注解 2. spring boot 修改Java版本 和项目编码 3. 一个标准的spring boot 代码结构 4. 查看当前项目自动配置了那些模块 5. 禁用自动配置 6. 自定义banner及关闭banner 一、spring boot 配置文件，使用@SpringBootApplication注解spring boot 默认使用application.properties或者application.yml,放置在src/main/resources目录或者类路径的/config下，一般建议就放在src/main/resources这里我们使用application.properties来配置，这里我们试着修改下端口和访问路径目录结构如下：配置代码：12server.port=8081server.context-path=/boot 编写测试controller类123456789101112131415161718192021222324package com.likeoak.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * 测试Controller * The type Test controller. */@RestControllerpublic class TestController &#123; /** * 返回 String 字符串，访问成功，返回“test ok” * Test string. * * @return the string */@RequestMapping(\"/test\") public String test()&#123; return \"test ok!\"; &#125;&#125; 启动main方法，及运行APP启动类123456789101112131415161718package com.likeoak;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * 默认启动类 */@SpringBootApplicationpublic class App&#123; public static void main( String[] args ) &#123; SpringApplication.run(App.class,args); &#125;&#125; 访问：http://localhost:8081/boot/test结果：test ok! 代码解释：@SpringBootApplication 解释先看下注解@SpringBootApplication的源码 @SpringBootApplication的源码12345678910@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)public @interface SpringBootApplication &#123; 里面包含@SpringBootConfiguration的源码12345@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Configurationpublic @interface SpringBootConfiguration &#123; 总结：@SpringBootApplication注解其实是@Configuration，@EnableAutoConfiguration，@ComponentScan这三个注解组合 注解解释@Configuration 注解：标明该类使用Spring是基于java的配置@EnableAutoConfiguration ：开启自动配置注解，有这个注解spring boot就会根据我们所引用的jar包来自动配置我们需要的配置，这正是spring boot 魔力。 @ComponentScan：spring扫描注解，有这个注解spring boot 就会扫描（默认是以根路径为准）所有的包，来加载所有的@Bean,所有这里的TestController 就是被扫描到的，我们就可以访问了。 二、spring boot 修改Java版本 和项目编码在使用spring bootde 过程中，想自定义java配置，可以使用以下配置,加载到pom.xml中即可1234&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; 三、一个标准的spring boot 代码结构一个典型的spring boot 项目结构，这也是官网推荐的1234567891011121314com +- example +- myproject +- Application.java | +- domain | +- Customer.java | +- CustomerRepository.java | +- service | +- CustomerService.java | +- web +- CustomerController.java 四、 查看当前项目自动配置了那些模块查看当前项目有哪些自动配置，一共有三种方法 直接运行jar -jar xxx.jar –debug 在application中设置属性 1debug=true 直接在启动的时候，增加启动参数 我们可以选着任何一种，访问结果如下已启动配置:12345678910111213141516Positive matches:----------------- DispatcherServletAutoConfiguration matched: - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition) - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition) DispatcherServletAutoConfiguration.DispatcherServletConfiguration matched: - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition) - Default DispatcherServlet did not find dispatcher servlet beans (DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition) DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration matched: - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition) - DispatcherServlet Registration did not find servlet registration bean (DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition).... 未自动配置：1234567891011121314151617181920Negative matches:----------------- ActiveMQAutoConfiguration: Did not match: - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition) AopAutoConfiguration: Did not match: - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' (OnClassCondition) ArtemisAutoConfiguration: Did not match: - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory' (OnClassCondition) BatchAutoConfiguration: Did not match: - @ConditionalOnClass did not find required classes 'org.springframework.batch.core.launch.JobLauncher', 'org.springframework.jdbc.core.JdbcOperations' (OnClassCondition)... 五、 禁用自动配置比如不想自动配置数据库连接，就可以用如何代码来关掉自动配置123456789/** * 测试关闭数据库自动配置 * The type Data source config. */@Configuration@EnableAutoConfiguration(exclude = &#123;DataSourceAutoConfiguration.class&#125;)public class DataSourceConfig &#123;&#125; 六、自定义banner及关闭banner自定义spring boot 默认启动图案步骤： 直接在src/main/resources下创建一个banner.txt 访问网站http://patorjk.com/software/taag 生成字符，这里我们用”yiqixuejava”（一起学java）,将生成的字符复制到banner.txt中，启动应用即可 启动结果：123456 .__ .__ __ ___.__.|__| _____|__| ___ _____ __ ____ |__|____ ___ _______&lt; | || | / ____/ | \\ \\/ / | \\_/ __ \\ | \\__ \\\\ \\/ /\\__ \\ \\___ || | &lt; &lt;_| | | &gt; &lt;| | /\\ ___/ | |/ __ \\\\ / / __ \\_ / ____||__| \\__ |__| /__/\\_ \\____/ \\___ &gt; /\\__| (____ /\\_/ (____ / \\/ |__| \\/ \\/ \\______| \\/ \\/ 后续会继续推出这一系列spring boot的文章 本人网站：一起学JAVA一起学习QQ群：581665151 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/27/一起学JAVA之《spring-boot》03-开始spring-boot基本配置及项目结构/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"一起学JAVA之《spring boot》目录","slug":"一起学JAVA之《spring boot》目录","date":"2017-06-26T16:39:00.000Z","updated":"2017-06-28T15:40:18.343Z","comments":true,"path":"2017/06/27/一起学JAVA之《spring boot》目录/","link":"","permalink":"http://yoursite.com/2017/06/27/一起学JAVA之《spring boot》目录/","excerpt":"目录： 一起学JAVA之《spring boot》01-spring boot介绍 一起学JAVA之《spring boot》02-开发您的第一个Spring Boot应用程序 一起学JAVA之《spring boot》03 - 开始spring boot基本配置及项目结构 一起学JAVA之《spring boot》04 - spring boot 自定义（外化）配置 一起学JAVA之《spring boot》05 - spring boot 自定义配置文件","text":"目录： 一起学JAVA之《spring boot》01-spring boot介绍 一起学JAVA之《spring boot》02-开发您的第一个Spring Boot应用程序 一起学JAVA之《spring boot》03 - 开始spring boot基本配置及项目结构 一起学JAVA之《spring boot》04 - spring boot 自定义（外化）配置 一起学JAVA之《spring boot》05 - spring boot 自定义配置文件 一起学JAVA之《spring boot》06 - spring boot 日志处理（log4j,logback） 一起学JAVA之《spring boot》07 - spring boot 开发web应用-springMVC自动配置 一起学JAVA之《spring boot》08 - spring boot 开发web应用-模板引擎FreeMarker 一起学JAVA之《spring boot》09 - spring boot 开发web应用-模板引擎Thymeleaf 一起学JAVA之《spring boot》10 - spring boot 开发web应用-模板引擎jsp 一起学JAVA之《spring boot》11 - spring boot 开发web应用-错误处理 一起学JAVA之《spring boot》12 - spring boot 开发web应用-Servlets, Filters, listeners 一起学JAVA之《spring boot》13 - spring boot 开发web应用-使用Swagger2构建RESTful API 一起学JAVA之《spring boot》14 - spring boot 开发web应用-文件上传 一起学JAVA之《spring boot》15 - spring boot 数据访问-使用JdbcTemplate 一起学JAVA之《spring boot》16 - spring boot 数据访问-使用Spring-data-jpa 一起学JAVA之《spring boot》17 - spring boot 数据访问-多数据源配置 一起学JAVA之《spring boot》18 - spring boot 数据访问-事务处理 一起学JAVA之《spring boot》19 - spring boot 数据访问-Redis 一起学JAVA之《spring boot》20 - spring boot 数据访问-MongoDB 一起学JAVA之《spring boot》21 - spring boot 数据访问-整合MyBatis 一起学JAVA之《spring boot》22 - spring boot 定时任务 一起学JAVA之《spring boot》23 - spring boot @Async实现异步调用 一起学JAVA之《spring boot》24 - spring boot 缓存EhCache使用 一起学JAVA之《spring boot》25 - spring boot 使用Redis做集中式缓存 一起学JAVA之《spring boot》26 - spring boot 集成Druid 一起学JAVA之《spring boot》27 - spring boot 使用异步消息服务-AMQP（RabbitMQ） 一起学JAVA之《spring boot》28 - spring boot 使用异步消息服务-JMS（ActiveMQ） 一起学JAVA之《spring boot》29 - spring boot 基于HTTP的监控 一起学JAVA之《spring boot》30 - spring boot 分布式事务 后续会继续推出这一系列spring boot的文章学习spring boot QQ群:581665151本人网站：一起学JAVA 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/27/一起学JAVA之《spring boot》目录/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"一起学JAVA之《spring boot》02-开发您的第一个Spring Boot应用程序","slug":"一起学JAVA之springBoot02-开发您的第一个Spring Boot应用程序","date":"2017-06-25T12:00:00.000Z","updated":"2017-06-25T11:56:05.391Z","comments":true,"path":"2017/06/25/一起学JAVA之springBoot02-开发您的第一个Spring Boot应用程序/","link":"","permalink":"http://yoursite.com/2017/06/25/一起学JAVA之springBoot02-开发您的第一个Spring Boot应用程序/","excerpt":"一、导航本节内容简介： 1. 开发之前环境检查 2. 创建pom.xml并导入依赖 3. 编写代码 4. 代码解释 5. 运行代码 6. 创建可执行的jar","text":"一、导航本节内容简介： 1. 开发之前环境检查 2. 创建pom.xml并导入依赖 3. 编写代码 4. 代码解释 5. 运行代码 6. 创建可执行的jar 二、开发之前环境检查让我们在Java中开发一个简单的 Hello World 的Web应用程序，来介绍Spring Boot一些主要的功能。这里将使用Maven构建该项目。 在开始之前，打开终端（windwos cmd）来验证java版本和maven版本 1234C:\\Users\\SEELE&gt;java -versionjava version \"1.8.0_121\"Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode) 这里要注意检查maven版本不是maven -v,而是mvn -v12C:\\Users\\SEELE&gt;mvn -vApache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1... 三、创建pom.xml并导入依赖 使用idea创建一个maven项目，并添加maven 父类依赖 123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.likeoak&lt;/groupId&gt; &lt;artifactId&gt;springboot&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;!--添加父类依赖--&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.2.RELEASE&lt;/version&gt; &lt;/parent&gt;&lt;/project&gt; 添加web依赖 12345678&lt;!--web依赖--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 四、编写代码 默认情况下，Maven将从src/main/java编译源代码，因此您需要创建该文件夹结构，然后添加一个名为src/main/java/Example.java的文件：注意：官方建议不要使用默认的default包来创建启动类，这样会导致所有的包都会被扫描，包括jar 1234567891011121314151617181920212223242526package com.likeoak;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * The type Spring boot example. */RestController@EnableAutoConfigurationpublic class SpringBootExample &#123; @RequestMapping(\"/\") String home() &#123; return \"Hello World!\"; &#125; public static void main(String[] args) throws Exception &#123; SpringApplication.run(SpringBootExample.class, args); &#125;&#125; 五、代码解释尽管以上代码不多，但是却发生很多事情，让我们一步一步来解释吧 1. 注解解释上面一共用了三个注解 @RestController ,@RequestMapping, @EnableAutoConfiguration @RestController是一个被称为构造性（stereotype）的注解，它表示的意思是是一个REST风格的Controller@RequestMapping 这个注解是提供路由信息，所有HTTP的 “/“这个请求都会被这个home方法捕获，这个和@RestController一起的意思是，当访问”/“这个路径的时候，就以字符串的形式返回”Hello World!” @EnableAutoConfiguration 这个注解的意思是告诉spring boot 根据你配置的jar来猜测你想如何配置spring这里我们配置了spring-boot-starter-web这个jar,spring boot 就会为我们自动配置tomcat和SprngMVC的相关配置,可以参考下面spring-boot-starter-web依赖包,看到里面有springMVC和tomcat的引用 附spring-boot-starter-web依赖包 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starters&lt;/artifactId&gt; &lt;version&gt;1.5.2.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;name&gt;Spring Boot Web Starter&lt;/name&gt; &lt;description&gt;Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container&lt;/description&gt; &lt;url&gt;http://projects.spring.io/spring-boot/&lt;/url&gt; &lt;organization&gt; &lt;name&gt;Pivotal Software, Inc.&lt;/name&gt; &lt;url&gt;http://www.spring.io&lt;/url&gt; &lt;/organization&gt; &lt;properties&gt; &lt;main.basedir&gt;$&#123;basedir&#125;/../..&lt;/main.basedir&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 附spring-boot-starter-tomcat依赖1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starters&lt;/artifactId&gt; &lt;version&gt;1.5.2.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;name&gt;Spring Boot Tomcat Starter&lt;/name&gt; &lt;description&gt;Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by spring-boot-starter-web&lt;/description&gt; &lt;url&gt;http://projects.spring.io/spring-boot/&lt;/url&gt; &lt;organization&gt; &lt;name&gt;Pivotal Software, Inc.&lt;/name&gt; &lt;url&gt;http://www.spring.io&lt;/url&gt; &lt;/organization&gt; &lt;properties&gt; &lt;main.basedir&gt;$&#123;basedir&#125;/../..&lt;/main.basedir&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-el&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-websocket&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 2. main方法main方法是一个java标准入口方法。这里main方法通过调用runm,将业务委托给了 Spring Boot的 SpringApplication 类。SpringApplication将引导我们启动spring,相应的启动被自动配置的tomcat web服务器，这里我们需要将主类 SpringBootExample作为参数传给run方法，告诉spring boot 那个是主类，并传递args参数给 spring boot,对于这个args参数，我们后续会讲解. 六、运行代码直接运行main方法 运行结果：1234567891011121314151617181920212223242526272829 .__ .__ __ ____ _ ____ _ ____ _ __ | | |__| | __ ____ _________ | | __ ____ ____ _____\\ \\/ \\/ /\\ \\/ \\/ /\\ \\/ \\/ / | | | | |/ // __ \\/ _ \\__ \\ | |/ / _/ ___\\/ _ \\ / \\ \\ / \\ / \\ / | |_| | &lt;\\ ___( &lt;_&gt; ) __ \\| &lt; \\ \\__( &lt;_&gt; ) Y Y \\ \\/\\_/ \\/\\_/ \\/\\_/ /\\ |____/__|__|_ \\\\___ &gt;____(____ /__|_ \\ /\\ \\___ &gt;____/|__|_| / \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/2017-06-25 18:58:59.061 INFO 10640 --- [ main] com.likeoak.SpringBootExample : Starting SpringBootExample on SEELE-PC with PID 10640 (G:\\Mybook\\springBoot\\target\\classes started by SEELE in G:\\Mybook\\springBoot)2017-06-25 18:58:59.065 INFO 10640 --- [ main] com.likeoak.SpringBootExample : No active profile set, falling back to default profiles: default2017-06-25 18:58:59.107 INFO 10640 --- [ main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6b8ca3c8: startup date [Sun Jun 25 18:58:59 CST 2017]; root of context hierarchy2017-06-25 18:59:00.581 INFO 10640 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)2017-06-25 18:59:00.597 INFO 10640 --- [ main] o.apache.catalina.core.StandardService : Starting service Tomcat2017-06-25 18:59:00.598 INFO 10640 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache Tomcat/8.5.112017-06-25 18:59:00.748 INFO 10640 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext2017-06-25 18:59:00.748 INFO 10640 --- [ost-startStop-1] o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in 1645 ms2017-06-25 18:59:00.900 INFO 10640 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean : Mapping servlet: 'dispatcherServlet' to [/]2017-06-25 18:59:00.904 INFO 10640 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'characterEncodingFilter' to: [/*]2017-06-25 18:59:00.905 INFO 10640 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]2017-06-25 18:59:00.905 INFO 10640 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'httpPutFormContentFilter' to: [/*]2017-06-25 18:59:00.906 INFO 10640 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'requestContextFilter' to: [/*]2017-06-25 18:59:01.247 INFO 10640 --- [ main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6b8ca3c8: startup date [Sun Jun 25 18:58:59 CST 2017]; root of context hierarchy2017-06-25 18:59:01.337 INFO 10640 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/]&#125;\" onto java.lang.String com.likeoak.SpringBootExample.home()2017-06-25 18:59:01.342 INFO 10640 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/error]&#125;\" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)2017-06-25 18:59:01.342 INFO 10640 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/error],produces=[text/html]&#125;\" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)2017-06-25 18:59:01.376 INFO 10640 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2017-06-25 18:59:01.376 INFO 10640 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2017-06-25 18:59:01.452 INFO 10640 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2017-06-25 18:59:01.669 INFO 10640 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup2017-06-25 18:59:01.760 INFO 10640 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)2017-06-25 18:59:01.764 INFO 10640 --- [ main] com.likeoak.SpringBootExample : Started SpringBootExample in 3.182 seconds (JVM running for 3.816) 然后访问 http://localhost:8080/结果：Hello World! 七、 创建可执行的jar这里通过maven插件来实现，在pom.xml中引入spring-boot-maven-plugin123456789&lt;!-- 可执行jar--&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 执行mvn package12345678910111213141516171819202122232425262728293031323334[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building springboot 1.0.0[INFO] ------------------------------------------------------------------------[INFO][INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springboot ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 0 resource[INFO] Copying 1 resource[INFO][INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ springboot ---[INFO] Nothing to compile - all classes are up to date[INFO][INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springboot ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory G:\\Mybook\\springBoot\\src\\test\\resources[INFO][INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ springboot ---[INFO] Nothing to compile - all classes are up to date[INFO][INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ springboot ---[INFO] No tests to run.[INFO][INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ springboot ---[INFO][INFO] --- spring-boot-maven-plugin:1.5.2.RELEASE:repackage (default) @ springboot ---[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 1.790 s[INFO] Finished at: 2017-06-25T19:47:08+08:00[INFO] Final Memory: 19M/226M[INFO] ------------------------------------------------------------------------ 打包之后，再target下面会出现spring-1.0.0.jar包 运行：java -jar spring-1.0.0.jar 后续会继续推出这一系列spring boot的文章 本人网站：一起学JAVA欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/25/一起学JAVA之springBoot02-开发您的第一个Spring Boot应用程序/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"一起学JAVA之《spring boot》01-spring boot介绍","slug":"一起学JAVA之springBoot01-SpringBoot介绍","date":"2017-06-25T08:55:00.000Z","updated":"2017-06-26T15:44:14.608Z","comments":true,"path":"2017/06/25/一起学JAVA之springBoot01-SpringBoot介绍/","link":"","permalink":"http://yoursite.com/2017/06/25/一起学JAVA之springBoot01-SpringBoot介绍/","excerpt":"一、导航本节内容简介: 1. 什么是spring boot 2. spring boot的优点 3. spring boot系统要求和本系列所用版本","text":"一、导航本节内容简介: 1. 什么是spring boot 2. spring boot的优点 3. spring boot系统要求和本系列所用版本 二、什么是spring boot一直以来都不知道怎么解释什么是spring boot框架，今天引用百度百科和官方话来解释下。 百度百科 Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。 官方解释 spring Boot可以基于Spring轻松创建可以“运行”的、独立的、生产级的应用程序 三、spring boot的优点简单来说就是这几个特点 快速构建项目 对主流框架可以无配置集成 项目可独立运行，无需依赖外部Servlet容器（如:tomcat） 可以提供运行时的应用监控（如指标，健康检查） 与springCloud天然集成 与云计算（Docker等）天然集成 无强依赖，没有代码生成和XML配置要求 提供starter来极大减少maven配置 自动配置 四、 spring boot系统要求和本系列博客所用版本默认情况下，本系列博客使用Spring Boot 1.5.2.RELEASE环境要求需要Java 7和Spring Framework 4.3.7.RELEASE或更高版本需要Maven 3.2及以上需要Servlet容器 名称 Servlet版本 JAVA版本 Tomcat 8 3.1 Java 7+ Jetty 9.3 3.1 Java 7+ 后续会继续推出这一系列spring boot的文章 本人网站：一起学JAVA 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/25/一起学JAVA之springBoot01-SpringBoot介绍/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"spring boot 学习--搭建ssmm框架02","slug":"spring-boot-学习-搭建ssmm框架02","date":"2017-06-24T10:26:06.000Z","updated":"2017-06-24T10:28:18.282Z","comments":true,"path":"2017/06/24/spring-boot-学习-搭建ssmm框架02/","link":"","permalink":"http://yoursite.com/2017/06/24/spring-boot-学习-搭建ssmm框架02/","excerpt":"接上篇——-开始来配置springmvc，并测试 思路： - web.xml配置servlet - springmvc配置文件 - 创建TestController - 创建测试页面 - 基本测试 - 乱码测试 - 时间测试","text":"接上篇——-开始来配置springmvc，并测试 思路： - web.xml配置servlet - springmvc配置文件 - 创建TestController - 创建测试页面 - 基本测试 - 乱码测试 - 时间测试 （1）web.xml配置springmvc 123456789101112131415&lt;!-- springmvc servlet配置 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;front&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;front&lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; （2）创建spring-mvc.xml 文件 springmvc 配置扫描，自动装配，JSP解析12345678910111213 &lt;context:component-scan base-package=\"com.study\" use-default-filters=\"false\"&gt; &lt;!--扫描 cn.itcast下的 所有类中 注解是 Controller的类 --&gt; &lt;context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/&gt;&lt;/context:component-scan&gt;&lt;!--自动装配 --&gt;&lt;context:annotation-config/&gt;&lt;!-- Jsp的视图解析器 --&gt;&lt;bean id=\"jspViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/view/\"/&gt; &lt;property name=\"suffix\" value=\".jsp\"/&gt;&lt;/bean&gt; （3）创建TestController12345678910111213141516171819package com.study.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.study.bean.TestTb;Controllerpublic class TestController &#123; @RequestMapping(\"/test/springmvc/testTbAdd\") public String test_testtb(TestTb tb)&#123; System.out.println(tb.toString()); return \"success\"; &#125;&#125; (4)创建测试页面和success页面,src/main/webapp/下创建index.jsp ,注意修改编码12345678910111213141516&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"test/springmvc/testTbAdd.do\" method=\"POST\"&gt; 名称：&lt;input type=\"text\" name=\"name\"/&gt;&lt;br/&gt; &lt;input type=\"submit\" value=\"提交\"/&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 在webapp/WEB-INF/view/下创建success.jsp 123456789101112&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 添加成功！&lt;/body&gt;&lt;/html&gt; (5)开始基本测试访问http://localhost:8080/boot-study-ssmm-xml/ 基本测试结果： （6）在TestController中添加方法，开始中文测试1234567RequestMapping(value=\"/test/unicode\",produces = \"plain/html; charset=UTF-8\") public @ResponseBody String test_unicode()&#123; return \"成功\"; &#125; 访问：http://localhost:8080/boot-study-ssmm-xml/test/unicode.do 中文测试返回结果: 解决办法 在web.xml 中添加字符拦截器,注意加载到所有servlet,filter的前面12345678910111213&lt;filter&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 中文测试继续测试 这是为什么喃，我们加载了字符拦截器，好像还是不行，但是在访问http://localhost:8080/boot-study-ssmm-xml/ 这个接口的时候输入中文，后台是可以接收了 继续解决我们直接返回中文字符串的问题，这里是因为@ResponseBody 注解，这个注解返回的String,springmvc会直接用org.springframework.http.converter.StringHttpMessageConverter 来进行转发，这个默然的编码是：ISO-8859-1 明白了，现在我们可以在springmvc中配置这个StringHttpMessageConverter 的编码12345678910111213&lt;bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" &gt; &lt;property name=\"messageConverters\"&gt; &lt;list&gt; &lt;bean class = \"org.springframework.http.converter.StringHttpMessageConverter\"&gt; &lt;property name = \"supportedMediaTypes\"&gt; &lt;list&gt; &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; 中文测试继续测试2 结果： （7）时间测试 index.jsp修改如下1234567891011121314151617&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"test/springmvc/testTbAdd.do\" method=\"POST\"&gt; 名称：&lt;input type=\"text\" name=\"name\"/&gt;&lt;br/&gt; 生日：&lt;input type=\"text\" name=\"birthday\"/&gt; &lt;input type=\"submit\" value=\"提交\"/&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 时间测试： 400，错误，估计就是时间类型不匹配，我们在TestController中绑定一个时间解析来试试12345678910/** * 注册日期格式 * @param request * @param binder */@InitBinderpublic void InitBinder(HttpServletRequest request ,ServletRequestDataBinder binder)&#123; DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\"); binder.registerCustomEditor(Date.class, new CustomDateEditor(df, false));&#125; 时间测试1 时间测试结果： OK，到此所有的都大功告成 补充一下：时间转换器也可以全区配置，在springmvc中，配置如下：1234567&lt;!-- 全局时间配置 --&gt;&lt;bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"&gt; &lt;property name=\"webBindingInitializer\"&gt; &lt;!-- 自定义事件处理器 --&gt; &lt;bean class= \"com.study.util.BindindInitializer\" /&gt; &lt;/property&gt;&lt;/bean&gt; 12345678910111213141516171819package com.study.util;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.support.WebBindingInitializer;import org.springframework.web.context.request.WebRequest;public class BindindInitializer implements WebBindingInitializer&#123; public void initBinder(WebDataBinder binder, WebRequest request) &#123; DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\"); binder.registerCustomEditor(Date.class, new CustomDateEditor(df, false)); &#125;&#125; 下篇就正式进入springboot的开发了 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/24/spring-boot-学习-搭建ssmm框架02/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"spring boot 学习--搭建ssmm框架01","slug":"spring-boot-学习-搭建ssmm框架01","date":"2017-06-24T10:21:06.000Z","updated":"2017-06-24T15:19:44.751Z","comments":true,"path":"2017/06/24/spring-boot-学习-搭建ssmm框架01/","link":"","permalink":"http://yoursite.com/2017/06/24/spring-boot-学习-搭建ssmm框架01/","excerpt":"前言： 现在在企业中一般都是用SSMM框架来进行开发。SSMM（springmvc + spring + mybatis+ mysql） 从分层角度来说 - springmvc 控制层 - spring service 层 - mybatis dao层 - mysql 数据库 从我个人而言，需要搭建用springboot来搭建SSMM框架，前提是能先用配置的方式搭建起来，这样在springboot的时候，可以思路清晰一些，下面就开始搭建。我先搭建一份xml 格式SSMM，在由xml 转向springboot，这样就会发现springboot的配置是怎么来的。","text":"前言： 现在在企业中一般都是用SSMM框架来进行开发。SSMM（springmvc + spring + mybatis+ mysql） 从分层角度来说 - springmvc 控制层 - spring service 层 - mybatis dao层 - mysql 数据库 从我个人而言，需要搭建用springboot来搭建SSMM框架，前提是能先用配置的方式搭建起来，这样在springboot的时候，可以思路清晰一些，下面就开始搭建。我先搭建一份xml 格式SSMM，在由xml 转向springboot，这样就会发现springboot的配置是怎么来的。 思路 创建maven项目 导入pom.xml 配置web.xml 配置数据库连接，连接池，sessionFactory，事务,扫描注入的配置 创建数据库 写测试用例 测试添加 测试事物 完成基本搭建。 后续可以继续配置springmvc 按照上面的思路现在来开始搭建 （1）.创建一个maven项目（2）.导入pomx.mllt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.study&lt;/groupId&gt; &lt;artifactId&gt;boot-study-ssmm-xml&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;properties&gt; &lt;java-version&gt;1.7&lt;/java-version&gt; &lt;junit-version&gt;4.8.2&lt;/junit-version&gt; &lt;org.springframework-version&gt;3.2.4.RELEASE&lt;/org.springframework-version&gt; &lt;jackson-mapper-asl-version&gt;1.9.12&lt;/jackson-mapper-asl-version&gt; &lt;jackson-core-asl-version&gt;1.9.12&lt;/jackson-core-asl-version&gt; &lt;mysql-connector-java-version&gt;5.1.8&lt;/mysql-connector-java-version&gt; &lt;org.mybatis-version&gt;3.2.7&lt;/org.mybatis-version&gt; &lt;org.mybatis-spring-version&gt;1.2.2&lt;/org.mybatis-spring-version&gt; &lt;opensymphony-version&gt;2.4.2&lt;/opensymphony-version&gt; &lt;freemarker-version&gt;2.3.9&lt;/freemarker-version&gt; &lt;c3p0-version&gt;0.9.1.2&lt;/c3p0-version&gt; &lt;commons-collections-version&gt;1.0&lt;/commons-collections-version&gt; &lt;commons-fileupload-version&gt;1.2.2&lt;/commons-fileupload-version&gt; &lt;org.apache.commons-version&gt;3.1&lt;/org.apache.commons-version&gt; &lt;commons-codec-version&gt;1.6&lt;/commons-codec-version&gt; &lt;dom4j-version&gt;1.6.1&lt;/dom4j-version&gt; &lt;javax.servlet-version&gt;1.2&lt;/javax.servlet-version&gt; &lt;aspectjweaver-version&gt;1.6.6&lt;/aspectjweaver-version&gt; &lt;slf4j-log4j12-version&gt;1.6.6&lt;/slf4j-log4j12-version&gt; &lt;log4j-version&gt;1.2.16&lt;/log4j-version&gt; &lt;javax.servlet-jsp-version&gt;2.0&lt;/javax.servlet-jsp-version&gt; &lt;cglib-version&gt;2.2.2&lt;/cglib-version&gt; &lt;slf4j-api-version&gt;1.6.6&lt;/slf4j-api-version&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;/properties&gt; &lt;dependencies&gt; &lt;!-- with junit4.8.2 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit-version&#125;&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;/dependency&gt; &lt;!-- with spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-instrument&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-instrument-tomcat&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--springmvc 转 Json--&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson-mapper-asl-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson-core-asl-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--freemarker--&gt; &lt;dependency&gt; &lt;groupId&gt;freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;$&#123;freemarker-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- with mybatis-spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;org.mybatis-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;org.mybatis-spring-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- jdbc driver --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql-connector-java-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- connect pool with c3p0 --&gt; &lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;$&#123;c3p0-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- apache commons jar --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-collections-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-fileupload-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;$&#123;org.apache.commons-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-codec-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- analyze xml use dom4j --&gt; &lt;dependency&gt; &lt;groupId&gt;dom4j&lt;/groupId&gt; &lt;artifactId&gt;dom4j&lt;/artifactId&gt; &lt;version&gt;$&#123;dom4j-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- about servlet --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;$&#123;javax.servlet-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.6.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.6.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.activation&lt;/groupId&gt; &lt;artifactId&gt;activation&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- memcached --&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.maven-play-plugin.spy&lt;/groupId&gt; &lt;artifactId&gt;memcached&lt;/artifactId&gt; &lt;version&gt;2.4.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.danga&lt;/groupId&gt; &lt;artifactId&gt;memcached&lt;/artifactId&gt; &lt;version&gt;2.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;memcached-util&lt;/groupId&gt; &lt;artifactId&gt;memcached&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt; &lt;/dependency&gt; --&gt; &lt;dependency&gt; &lt;groupId&gt;cglib&lt;/groupId&gt; &lt;artifactId&gt;cglib&lt;/artifactId&gt; &lt;version&gt;$&#123;cglib-version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;net.fckeditor&lt;/groupId&gt; &lt;artifactId&gt;java-core&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20131018&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;oscache&lt;/groupId&gt; &lt;artifactId&gt;oscache&lt;/artifactId&gt; &lt;version&gt;2.4.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--jerson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt; &lt;artifactId&gt;jersey-client&lt;/artifactId&gt; &lt;version&gt;1.18.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--jcaptcha --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;com.octo.captcha&lt;/groupId&gt; &lt;artifactId&gt;jcaptcha-my&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/dependency&gt; --&gt; &lt;!--page --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;cn.itcast&lt;/groupId&gt; &lt;artifactId&gt;page&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/dependency&gt; --&gt; &lt;/dependencies&gt;&lt;/project&gt; （3）配置web.xml 一般我们在配置web.xml 首先会配置web.xml的头 123456&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:javaee=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\" id=\"WebApp_ID\" version=\"2.4\"&gt; 配置spring监听 1234&lt;!-- Spring监听 --&gt; &lt;listener &gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; 扩展下：一般在这里我们会配置spring监听的spring配置文件路径，默认情况下是/WEB-INF/applicationContext.xml这里我们可以去看下源码，到底是为什么要这么配置监听器，发现是继承ContextLoader继续，我们去查看下ContextLoader 源码 发现这个就是我们平时配置的Context-param，原来是这么来的，看注解发现我们可以去org.springframework.web.context.support.XmlWebApplicationContext#DEFAULT_CONFIG_LOCATION 看下监听器的默认配置 继续查看XmlWebApplicationContext 到这里，明白了吧，原来默认配置在这里哈。 继续配置我们的监听文件路径，一般我习惯不用默认配置，设置如下12345&lt;!-- spring监听文件地址 --&gt;&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:application-context.xml&lt;/param-value&gt;&lt;/context-param&gt; 创建application-context.xml12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt; &lt;import resource=\"config/*.xml\" /&gt;&lt;/beans&gt; 创建文件夹 config （3）在文件夹下配置数据库连接，连接池，sessionFactory，事务,扫描注入的配置 - 扫描 - 创建annotation.xml 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt; &lt;!-- 扫描配置，排除扫描controller --&gt; &lt;context:component-scan base-package=\"com.study\"&gt; &lt;context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/&gt; &lt;/context:component-scan&gt; &lt;!-- 隐式地向 Spring容器注册AutowiredAnnotationBeanPostProcessor、 RequiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor 以及PersistenceAnnotationBeanPostProcessor这4个BeanPostProcessor --&gt; &lt;context:annotation-config/&gt;&lt;/beans&gt; 数据库连接 - 读取配置文件创建properties.xml（读取配置文件） 1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt; &lt;bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt; &lt;property name=\"locations\"&gt; &lt;list&gt; &lt;!-- 配置Jdbc --&gt; &lt;value&gt;classpath:properties/jdbc.properties&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; jdbc连接 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"$&#123;driverClass&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;jdbcUrl&#125;\"&gt;&lt;/property&gt; &lt;property name=\"user\" value=\"$&#123;user&#125;\" /&gt; &lt;property name=\"password\" value=\"$&#123;password&#125;\"/&gt; &lt;/bean&gt;&lt;/beans&gt; mybatis 配置 123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt; &lt;bean class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;property name=\"typeAliasesPackage\" value=\"com.study.bean\"/&gt; &lt;!-- &lt;property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/&gt; --&gt; &lt;/bean&gt; &lt;!-- 配置Mybatis扫描 --&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;property name=\"basePackage\" value=\"com.study.dao\"/&gt; &lt;/bean&gt;&lt;/beans&gt; 创建事务transation.xml 123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt; &lt;!-- spring 事务 --&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;/bean&gt; &lt;!-- 开启注解事务--&gt; &lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt;&lt;/beans&gt; 在properties文件中创建jdbc.properties1234driverClass=com.mysql.jdbc.DriverjdbcUrl=jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8user=rootpassword= 配置文件到这里就结束了，终于结束了。。 （4）开始创建数据库 创建 test数据库，创建下面的表123456CREATE TABLE `test_tb` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, `birthday` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; （5）写测试用例一般我会写一个通用的BaseTest,这样其他测试类直接继承就可以开始测试，不用去理会测试环境的配置 123456789101112package com.study.test;import org.junit.runner.RunWith;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations = &#123;\"classpath:application-context.xml\"&#125;)public class BaseTest &#123;&#125; 1234567891011121314151617181920212223package com.study.test;import java.util.Date;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import com.study.bean.TestTb;import com.study.service.TestTbService;public class TestTestTb extends BaseTest&#123; @Autowired private TestTbService testTbService; @Test public void test_add()&#123; TestTb tb = new TestTb(); tb.setName(\"test\"); tb.setBirthday(new Date()); testTbService.add(tb); &#125;&#125; （6）写model,service,dao,mapper，开始测试 附xml1234567891011&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.study.dao.TestTbDao\"&gt; &lt;!-- 添加测试数据 --&gt; &lt;insert id=\"addTestTb\" parameterType=\"TestTb\"&gt; insert into test_tb (name,birthday) values (#&#123;name&#125;,#&#123;birthday&#125;) &lt;/insert&gt;&lt;/mapper&gt; 其他代码比较简单，就不附上了 （7）测试事物，一般写测试事物的时候，我会在service层抛出异常，如果异常抛出，数据数据没有添加成功，则事务配置成功，反之则没有成功。 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/24/spring-boot-学习-搭建ssmm框架01/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]},{"title":"spring boot 学习--搭建ssmm框架03","slug":"spring-boot-学习-搭建ssmm框架03","date":"2017-06-24T09:36:06.000Z","updated":"2017-06-24T10:25:11.148Z","comments":true,"path":"2017/06/24/spring-boot-学习-搭建ssmm框架03/","link":"","permalink":"http://yoursite.com/2017/06/24/spring-boot-学习-搭建ssmm框架03/","excerpt":"继续接上篇—–，这篇开始来搭建springboot方式的ssmm框架 思路 - 创建一个maven项目 - 配置pom.xml - 创建application.properties文件 - 配置mybatis，事物，数据库等信息 - 配置springmvc - 创建启动类 - 创建测试类 - 开始测试 1.创建一个maven项目","text":"继续接上篇—–，这篇开始来搭建springboot方式的ssmm框架 思路 - 创建一个maven项目 - 配置pom.xml - 创建application.properties文件 - 配置mybatis，事物，数据库等信息 - 配置springmvc - 创建启动类 - 创建测试类 - 开始测试 1.创建一个maven项目 2.配置pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.study&lt;/groupId&gt; &lt;artifactId&gt;boot-study-ssmm-boot&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;!-- springboot 父类，版本控制--&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.7&lt;/java.version&gt; &lt;mybatis.version&gt;3.3.1&lt;/mybatis.version&gt; &lt;mybatis.spring.version&gt;1.2.4&lt;/mybatis.spring.version&gt; &lt;mapper.version&gt;3.3.6&lt;/mapper.version&gt; &lt;pagehelper.version&gt;4.1.1&lt;/pagehelper.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--对全栈web开发的支持，包括Tomcat和 spring-webmvc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 对面向切面编程的支持，包括 spring-aop 和AspectJ --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 对常用测试依赖的支持，包括JUnit, Hamcrest和Mockito，还有 spring-test 模块 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 对JDBC数据库的支持 自然也包括事务 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据库连接 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- json --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt; &lt;artifactId&gt;jackson-datatype-joda&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt; &lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.11&lt;/version&gt; &lt;/dependency&gt; &lt;!--Mybatis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--分页插件--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--通用Mapper--&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper&lt;/artifactId&gt; &lt;version&gt;$&#123;mapper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring-boot-configuration:spring boot 配置处理器; --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- tomcat配置 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- servlet 依赖. --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;!-- 可执行jar --&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 3.创建application.properties 在src/main/resources/下创建application.properties 4.配置数据库 (1). 配置数据库12345678######################################################## jdbc####################################################spring.datasource.url = jdbc:mysql://localhost:3306/testspring.datasource.username = rootspring.datasource.password =spring.datasource.driverClassName = com.mysql.jdbc.Driver （2）配置mybatis 配置扫描类 12345678910111213141516171819202122232425package com.study.springboot.config;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import tk.mybatis.spring.mapper.MapperScannerConfigurer;/** * mybatis 扫描类配置 * @author like * */@Configuration//注意，由于MapperScannerConfigurer执行的比较早，所以必须有下面的注解@AutoConfigureAfter(MybatisConf.class)public class MyBatisMapperScannerConfig &#123; @Bean public MapperScannerConfigurer mapperScannerConfigurer() &#123; MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\"); mapperScannerConfigurer.setBasePackage(\"com.study.springboot.mapper\"); return mapperScannerConfigurer; &#125;&#125; 配置jdbc,mybatis存放路径和别名 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package com.study.springboot.config;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;/** * JDBC 基本配置 * @author like * */@Component@ConfigurationProperties(prefix=\"spring.datasource\")public class JdbcConfig &#123; private String url; private String userName; private String password; private String driverClassName; public String getUrl() &#123; return url; &#125; public void setUrl(String url) &#123; this.url = url; &#125; public String getUserName() &#123; return userName; &#125; public void setUserName(String userName) &#123; this.userName = userName; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getDriverClassName() &#123; return driverClassName; &#125; public void setDriverClassName(String driverClassName) &#123; this.driverClassName = driverClassName; &#125;&#125;package com.study.springboot.config;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Configuration;import org.springframework.stereotype.Component;/** * mapper 基本配置 * @author like * */@Component@ConfigurationProperties(prefix=\"mybatis.prop\")public class MybatisProp &#123; private String mapperLocations;//mapper存放路径 private String typeAliasesPackage; //别名包 public String getMapperLocations() &#123; return mapperLocations; &#125; public void setMapperLocations(String mapperLocations) &#123; this.mapperLocations = mapperLocations; &#125; public String getTypeAliasesPackage() &#123; return typeAliasesPackage; &#125; public void setTypeAliasesPackage(String typeAliasesPackage) &#123; this.typeAliasesPackage = typeAliasesPackage; &#125;&#125; mybatis基本配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123package com.study.springboot.config;import java.util.Properties;import org.apache.ibatis.plugin.Interceptor;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.SqlSessionFactoryBean;import org.mybatis.spring.SqlSessionTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;import org.springframework.core.io.support.ResourcePatternResolver;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.annotation.EnableTransactionManagement;import org.springframework.transaction.annotation.TransactionManagementConfigurer;import com.alibaba.druid.pool.DruidDataSource;import com.github.pagehelper.PageHelper;@Configuration@EnableTransactionManagementpublic class MybatisConf implements TransactionManagementConfigurer&#123; @Autowired private JdbcConfig jdbcConfig; @Autowired private MybatisProp prop; /** * 配置 dataSource 相当于 xml &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"$&#123;driverClass&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;jdbcUrl&#125;\"&gt;&lt;/property&gt; &lt;property name=\"user\" value=\"$&#123;user&#125;\" /&gt; &lt;property name=\"password\" value=\"$&#123;password&#125;\"/&gt; &lt;/bean&gt; * @return */ @Bean(name=\"dataSource\") public DruidDataSource createDataSource()&#123; DruidDataSource druidDataSource = new DruidDataSource(); druidDataSource.setUrl(jdbcConfig.getUrl()); druidDataSource.setDriverClassName(jdbcConfig.getDriverClassName()); druidDataSource.setUsername(jdbcConfig.getUserName()); druidDataSource.setPassword(jdbcConfig.getPassword()); return druidDataSource; &#125; /** * xml配置 &lt;bean class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;property name=\"typeAliasesPackage\" value=\"com.study.bean\"/&gt; &lt;/bean&gt; * @return */ @Bean(name = \"sqlSessionFactory\") public SqlSessionFactory sqlSessionFactoryBean()&#123; SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(createDataSource()); //别名包 bean.setTypeAliasesPackage(prop.getTypeAliasesPackage()); //分页插件 PageHelper pageHelper = new PageHelper(); Properties properties = new Properties(); properties.setProperty(\"reasonable\", \"true\"); properties.setProperty(\"supportMethodsArguments\", \"true\"); properties.setProperty(\"returnPageInfo\", \"check\"); properties.setProperty(\"params\", \"count=countSql\"); pageHelper.setProperties(properties); //添加插件 bean.setPlugins(new Interceptor[]&#123;pageHelper&#125;); //添加XML目录 ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(); try &#123; //设置mapper 目录，这些都可以配置到配置文件中，直接注入进来接可以了 bean.setMapperLocations(resolver.getResources(prop.getMapperLocations())); return bean.getObject(); &#125; catch (Exception e) &#123; e.printStackTrace(); throw new RuntimeException(e); &#125; &#125;; /** * 整合 spring +mybaits * @param sqlSessionFactory * @return */ @Bean public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123; return new SqlSessionTemplate(sqlSessionFactory); &#125; /* * 配置注解事物 * 相当于xml &lt;!-- spring 事务 --&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;/bean&gt; &lt;!-- 开启注解事务--&gt; &lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt; */ public PlatformTransactionManager annotationDrivenTransactionManager() &#123; return new DataSourceTransactionManager(createDataSource()); &#125;&#125; springmvc 配置，配置jsp存放路径 12345678910111213141516171819202122server.port=8001######################################################## jdbc####################################################spring.datasource.url = jdbc:mysql://localhost:3306/testspring.datasource.username = rootspring.datasource.password =spring.datasource.driverClassName = com.mysql.jdbc.Driver######################################################## mybatis####################################################mybatis.prop.mapperLocations=classpath:mapper/*.xmlmybatis.prop.typeAliasesPackage=com.study.springboot.bean######################################################## jsp####################################################spring.mvc.view.prefix=/WEB-INF/view/spring.mvc.view.suffix=.jsp springmvc 配置时间转化器，字符拦截器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package com.study.springboot.config;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import org.springframework.core.convert.converter.Converter;/** * 字符串转Date * @author like * */public class StringToDateConverter implements Converter&lt;String, Date&gt; &#123; public Date convert(String source) &#123; SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyMMdd\"); try &#123; return dateFormat.parse(source); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;package com.study.springboot.config;import java.nio.charset.Charset;import java.util.List;import javax.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Configuration;import org.springframework.core.convert.support.GenericConversionService;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.StringHttpMessageConverter;import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;/** * Spring mvc 配置 * @author like * */@Configurationpublic class SpringMVCConfig extends WebMvcConfigurerAdapter&#123; /* 解决转码问题Spring @responseBody 问题 * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter#configureMessageConverters(java.util.List) */ @Override public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; converters.add(getConverter()); &#125; public StringHttpMessageConverter getConverter()&#123; StringHttpMessageConverter converter = new StringHttpMessageConverter(); converter.setDefaultCharset(Charset.forName(\"UTF-8\")); return converter; &#125;// 局部时间配置// @InitBinder(\"date\")// public void initBinder(WebDataBinder binder)&#123;// binder.registerCustomEditor(Date.class,new CustomDateEditor(new SimpleDateFormat(\"yyyyMMdd\"), true, 8));// &#125; @Autowired private RequestMappingHandlerAdapter handlerAdapter; /** * 增加字符串转日期的功能 */ @PostConstruct public void initEditableValidation() &#123; ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer) handlerAdapter .getWebBindingInitializer(); if (initializer.getConversionService() != null) &#123; GenericConversionService genericConversionService = (GenericConversionService) initializer .getConversionService(); genericConversionService.addConverter(new StringToDateConverter()); &#125; &#125;&#125; (3) 创建启动类 12345678910111213141516package com.study.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class BootApp &#123; public static void main(String[] args) &#123; SpringApplication.run(BootApp.class, args); &#125;&#125; (4)创建 测试基础类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135package com.study.springboot.bean;import javax.persistence.Column;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;public class User &#123; @Id @Column(name = \"Id\") @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer id; private String name; private String email; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125; @Override public String toString() &#123; return \"User [id=\" + id + \", name=\" + name + \", email=\" + email + \"]\"; &#125;&#125;package com.study.springboot.service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.study.springboot.bean.User;import com.study.springboot.mapper.UserMapper;@Servicepublic class UserServiceImpl &#123; @Autowired private UserMapper userMapper; public User find(Integer id) &#123; return userMapper.selectByPrimaryKey(id); &#125;&#125;package com.study.springboot.mapper;import com.study.springboot.bean.User;import tk.mybatis.mapper.common.Mapper;public interface UserMapper extends Mapper&lt;User&gt;&#123;&#125;package com.study.springboot.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import com.study.springboot.bean.User;import com.study.springboot.service.UserServiceImpl;@RestControllerpublic class TestController &#123; @Autowired private UserServiceImpl userServiceImpl; @RequestMapping(value=\"/user\") public String testMybaits(Integer id)&#123; User user = userServiceImpl.find(id); return user.toString(); &#125; @RequestMapping(value=\"/unicode\") public String unicode()&#123; return \"成功\"; &#125;&#125;package com.study.springboot.controller;import java.util.Date;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class CoreController &#123; @RequestMapping(value=\"welcome\") public String toWelcome()&#123; return \"welcome\"; &#125; @RequestMapping(value=\"todate\") public String todate()&#123; return \"date\"; &#125; @RequestMapping(value=\"date\") public String date(Date date)&#123; System.out.println(date); return \"date\"; &#125;&#125; 创建mapper在 src/main/resources 下创建mapper 目录1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.study.springboot.mapper.UserMapper\"&gt;&lt;/mapper&gt; (5)创建 测试页面在 src/main/webapp/WEB-INF/view/ 12345678910111213141516&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/date\" method=\"post\"&gt; 时间 ：&lt;input type=\"text\" name=\"date\"/&gt;&lt;br/&gt; &lt;input type=\"submit\" value=\"提交\"/&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; welcome!&lt;/body&gt;&lt;/html&gt; （6）开始测试 直接运行 BootApp main方法 启动成功 ，可以看见一下内容：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v1.4.0.RELEASE)2016-09-22 14:47:23.610 INFO 6088 --- [ main] com.study.springboot.BootApp : Starting BootApp on USER-20150824CO with PID 6088 (J:\\eclipse-javaee\\work\\boot\\boot-study-ssmm-boot\\target\\classes started by Administrator in J:\\eclipse-javaee\\work\\boot\\boot-study-ssmm-boot)2016-09-22 14:47:23.617 INFO 6088 --- [ main] com.study.springboot.BootApp : No active profile set, falling back to default profiles: default2016-09-22 14:47:23.703 INFO 6088 --- [ main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@11dbed: startup date [Thu Sep 22 14:47:23 CST 2016]; root of context hierarchy2016-09-22 14:47:24.962 WARN 6088 --- [ main] o.s.c.a.ConfigurationClassPostProcessor : Cannot enhance @Configuration bean definition 'myBatisMapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.2016-09-22 14:47:25.589 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'jdbcConfig' of type [class com.study.springboot.config.JdbcConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.601 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'mybatisProp' of type [class com.study.springboot.config.MybatisProp] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.602 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'mybatisConf' of type [class com.study.springboot.config.MybatisConf$$EnhancerBySpringCGLIB$$2212bb2e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.744 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'dataSource' of type [class com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.751 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration' of type [class org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f53b36e1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.826 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [class org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.831 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'dataSourceInitializer' of type [class org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:25.833 INFO 6088 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [class org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$13479381] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2016-09-22 14:47:26.502 INFO 6088 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8001 (http)2016-09-22 14:47:26.519 INFO 6088 --- [ main] o.apache.catalina.core.StandardService : Starting service Tomcat2016-09-22 14:47:26.520 INFO 6088 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache Tomcat/8.5.42016-09-22 14:47:27.056 INFO 6088 --- [ost-startStop-1] org.apache.jasper.servlet.TldScanner : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.2016-09-22 14:47:27.063 INFO 6088 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext2016-09-22 14:47:27.063 INFO 6088 --- [ost-startStop-1] o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in 3363 ms2016-09-22 14:47:27.355 INFO 6088 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean : Mapping servlet: 'dispatcherServlet' to [/]2016-09-22 14:47:27.362 INFO 6088 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'characterEncodingFilter' to: [/*]2016-09-22 14:47:27.363 INFO 6088 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]2016-09-22 14:47:27.363 INFO 6088 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'httpPutFormContentFilter' to: [/*]2016-09-22 14:47:27.363 INFO 6088 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'requestContextFilter' to: [/*]2016-09-22 14:47:27.873 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@11dbed: startup date [Thu Sep 22 14:47:23 CST 2016]; root of context hierarchy2016-09-22 14:47:28.551 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/date]&#125;\" onto public java.lang.String com.study.springboot.controller.CoreController.date(java.util.Date)2016-09-22 14:47:28.554 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/welcome]&#125;\" onto public java.lang.String com.study.springboot.controller.CoreController.toWelcome()2016-09-22 14:47:28.555 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/todate]&#125;\" onto public java.lang.String com.study.springboot.controller.CoreController.todate()2016-09-22 14:47:28.555 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/unicode]&#125;\" onto public java.lang.String com.study.springboot.controller.TestController.unicode()2016-09-22 14:47:28.556 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/user]&#125;\" onto public java.lang.String com.study.springboot.controller.TestController.testMybaits(java.lang.Integer)2016-09-22 14:47:28.560 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/error]&#125;\" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)2016-09-22 14:47:28.561 INFO 6088 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"&#123;[/error],produces=[text/html]&#125;\" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)2016-09-22 14:47:28.632 INFO 6088 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2016-09-22 14:47:28.632 INFO 6088 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2016-09-22 14:47:28.731 INFO 6088 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2016-09-22 14:47:29.325 INFO 6088 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup2016-09-22 14:47:29.326 INFO 6088 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Bean with name 'dataSource' has been autodetected for JMX exposure2016-09-22 14:47:29.335 INFO 6088 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]2016-09-22 14:47:29.567 INFO 6088 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8001 (http)2016-09-22 14:47:29.574 INFO 6088 --- [ main] com.study.springboot.BootApp : Started BootApp in 6.672 seconds (JVM running for 7.159) 访问 http://localhost:8001/unicode 返回成功，表示字符测试成功 访问 http://localhost:8001/user?id=1，这里注意下数据库SQL自己准备哈 下面是我的SQL 123456CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, `email` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1; 返回User [id=1, name=test, email=123456] 表示搭建成功 继续访问：http://localhost:8001/todate后台打印出你输出的时间，转的的date,表示成功 如： 2016-08-08 –&gt;Sun Dec 08 00:00:00 CST 15成功 到此，次springboot框架搭建就完成了 欢迎转载，但转载请注明来自 www.likeoak.com，并保持转载后文章内容的完整。本人保留所有版权相关权利 本文链接：http://yoursite.com/2017/06/24/spring-boot-学习-搭建ssmm框架03/","categories":[],"tags":[{"name":"springBoot","slug":"springBoot","permalink":"http://yoursite.com/tags/springBoot/"}]}]}